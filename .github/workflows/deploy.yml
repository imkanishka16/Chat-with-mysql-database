name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ap-south-1

    - name: Setup SSH key
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.EC2_SSH_KEY }}" | tr -d '\r' > TCI_new_.pem
        chmod 600 TCI_new_.pem
        if ! grep -q "BEGIN" TCI_new_.pem; then
          echo "Error: Invalid key format"
          exit 1
        fi

    - name: Deploy to EC2
      env:
        HOST: ubuntu@3.108.173.11
        OPENAI_API_KEY: ${{ secrets.OPENAI_KEY }}
      run: |
        # Create comprehensive .env file
        cat > .env << EOL
        OPENAI_API_KEY=${OPENAI_API_KEY}
        DB_HOST=${{ secrets.DB_HOST }}
        DB_USER=${{ secrets.DB_USER }}
        DB_PASSWORD=${{ secrets.DB_PASSWORD }}
        DB_NAME=${{ secrets.DB_NAME }}
        EOL
        
        # Test SSH connection
        if ! ssh -i TCI_new_.pem -o StrictHostKeyChecking=no -o ConnectTimeout=10 $HOST 'echo "SSH connection successful"'; then
          echo "SSH connection failed"
          exit 1
        fi
        
        # Create app directory and ensure it's clean
        ssh -i TCI_new_.pem -o StrictHostKeyChecking=no $HOST 'mkdir -p ~/app && rm -rf ~/app/*'
        
        # Copy files including .env
        scp -i TCI_new_.pem -o StrictHostKeyChecking=no -r ./* .env $HOST:~/app/
        
        # Make deploy script executable and run it
        ssh -i TCI_new_.pem -o StrictHostKeyChecking=no $HOST 'cd ~/app && chmod +x deploy.sh && ./deploy.sh'